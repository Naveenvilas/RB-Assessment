name: CI/CD for Spring Boot Application

on:
   workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # Specify the JDK distribution
          java-version: '17'

      - name: Git leask checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      - name: Git leks scan
        uses: gitleaks/gitleaks-action@v2
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          

#      - name: Run SonarQube scan
#        run: |
#          mvn sonar:sonar -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}
    
#          - name: Check SonarQube Quality Gate
#          id: quality_gate
#          run: |
#            # Wait a few seconds to ensure SonarQube analysis is complete
#            sleep 30
#            # Retrieve the Quality Gate status
#            status=$(curl -s -X GET -u ${{ secrets.SONAR_TOKEN }}: \
#              "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=your_project_key" | \
#              jq -r '.projectStatus.status')
    
#            if [ "$status" != "OK" ]; then
#              echo "SonarQube Quality Gate failed. Status: $status"
#              exit 1
#            else
#              echo "SonarQube Quality Gate passed."
#            fi

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-


      - name: Build with Maven
        run: mvn package -DskipTests
   
      - name: Build Docker image
        run: |
          docker build -t naveenvilas/my-spring-boot-webapp:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
           username: ${{ secrets.DOCKER_USERNAME }}
           password: ${{ secrets.DOCKER_HUB_TOKEN }}
            #  password: ${{ secrets.DOCKER_PASSWORD }}          
  
      - name: Push Docker image
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p  ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push naveenvilas/my-spring-boot-webapp:latest

  #    - name: Set up AWS CLI
  #      uses: aws-actions/configure-aws-credentials@v2
  #      with:
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: ${{ secrets.AWS_REGION }}

#      - name: Set up kubectl
#        uses: azure/setup-kubectl@v1
#        with:
#          version: '1.28.0'

#      - name: Update kubeconfig
#        run: |
#          aws eks update-kubeconfig --name PrdEksCluster

 #     - name: Deploy to EKS
 #       run: |
 #         helm upgrade --install myapp ./RBCharts \
 #           --set image.repository=naveenvilas/my-spring-boot-webapp \
 #           --set image.tag=latest \
 #           --namespace default

      - name: Setup Helm
        uses: azure/setup-helm@v1

      - name: Helm Lint
        run: helm lint ./RBCharts

      - name: Helm Template
        run: helm template ./RBCharts --values ./RBCharts/values.yaml

  # - name: Helm Upgrade
   #   env:
   #     KUBECONFIG: ${{ secrets.KUBECONFIG }}
   #   run: |
   #     helm repo add my-repo https://my-repo-url/
   #     helm repo update
   #     helm upgrade --install my-release ./charts/my-chart-0.1.0.tgz --namespace default --create-namespace

   # - name: Cleanup Helm Packages
   #   run: rm -rf ./charts        